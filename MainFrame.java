/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoe;

import static java.lang.Integer.max;
import static java.lang.Integer.min;
import java.util.ArrayList;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author herna
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public static String[][] tableroTicTacToe = new String[3][3];
    public static int contador = 0;
    public static int turno = 0;//2= maquina, 1=jugador
    public static int profundidadP = 1;

    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        opcionesGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        maquinaRB = new javax.swing.JRadioButton();
        jugadorRB = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        b5 = new javax.swing.JButton();
        b6 = new javax.swing.JButton();
        b7 = new javax.swing.JButton();
        b8 = new javax.swing.JButton();
        b9 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        contadorTF = new javax.swing.JTextField();
        avisoJL = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        turnoJL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Â¿Quien inicia?"));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));

        opcionesGroup.add(maquinaRB);
        maquinaRB.setText("Maquina");
        maquinaRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maquinaRBActionPerformed(evt);
            }
        });

        opcionesGroup.add(jugadorRB);
        jugadorRB.setText("Jugador");
        jugadorRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugadorRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maquinaRB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jugadorRB, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jugadorRB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maquinaRB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tic tac toe"));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        b1.setEnabled(false);
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.setEnabled(false);
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setEnabled(false);
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b4.setEnabled(false);
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b5.setEnabled(false);
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        b6.setEnabled(false);
        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });

        b7.setEnabled(false);
        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b7ActionPerformed(evt);
            }
        });

        b8.setEnabled(false);
        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b8ActionPerformed(evt);
            }
        });

        b9.setEnabled(false);
        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos"));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Contador:");

        contadorTF.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        avisoJL.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
            .addComponent(contadorTF)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(avisoJL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contadorTF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(avisoJL)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Turno de::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14))); // NOI18N

        turnoJL.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(turnoJL, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(turnoJL, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        int i = 0, j = 1, n = 2;
        agregarMarca(j, i, n);
        //agregarMarca(i,j, n);
    }                                  

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        int i = 0, j = 0, n = 1;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        int i = 0, j = 2, n = 3;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        int i = 1, j = 0, n = 4;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        int i = 1, j = 1, n = 5;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        int i = 1, j = 2, n = 6;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void b7ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        int i = 2, j = 0, n = 7;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void b8ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:
        int i = 2, j = 1, n = 8;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void b9ActionPerformed(java.awt.event.ActionEvent evt) {                                   
        // TODO add your handling code here:.
        int i = 2, j = 2, n = 9;
        //agregarMarca(i,j, n);
        agregarMarca(j, i, n);
    }                                  

    private void jugadorRBActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        limpiarTablero();
        turno = 1;
        turnoJL.setText("Jugador");
        b1.setEnabled(true);
        b2.setEnabled(true);
        b3.setEnabled(true);
        b4.setEnabled(true);
        b5.setEnabled(true);
        b6.setEnabled(true);
        b7.setEnabled(true);
        b8.setEnabled(true);
        b9.setEnabled(true);
    }                                         

    private void maquinaRBActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        limpiarTablero();
        turno = 2;
        agregarMarca(1, 1, 5);
        turnoJL.setText("Maquina");
        b1.setEnabled(true);
        b2.setEnabled(true);
        b3.setEnabled(true);
        b4.setEnabled(true);
        b5.setEnabled(true);
        b6.setEnabled(true);
        b7.setEnabled(true);
        b8.setEnabled(true);
        b9.setEnabled(true);
    }                                         
    public static boolean buscarGanador(int posicionN, int turno, int j, int i, String jugador) { //turno 1=jugador, 2=maquina; especifica de quien es el turno actual
        if (jugador.equals("X") || jugador.equals("O")) {
            //System.out.println("S: "+jugador);
            switch (posicionN) {//QUITAR LA VARIABLE 'GANADOR' Y HACER QUE RETORNE YA SEA TRUE O FALSE
                case 1:
                    if (tableroTicTacToe[j + 1][i].equals(jugador)) {
                        if (tableroTicTacToe[j + 2][i].equals(jugador)) {//HORIZONTAL
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i + 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j + 1][i + 1].equals(jugador)) {//DIAGONAL1 \
                        if (tableroTicTacToe[j + 2][i + 2].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 2:
                    if (tableroTicTacToe[j + 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j - 1][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i + 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j][i + 2].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 3:
                    if (tableroTicTacToe[j - 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j - 2][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i + 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j][i + 2].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j - 1][i + 1].equals(jugador)) {//DIAGONAL1 /
                        if (tableroTicTacToe[j - 2][i + 2].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 4:
                    if (tableroTicTacToe[j + 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j + 2][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i + 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j][i - 1].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 5:
                    if (tableroTicTacToe[j + 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j - 1][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i + 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j][i - 1].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j + 1][i - 1].equals(jugador)) {//DIAGONAL1 /
                        if (tableroTicTacToe[j - 1][i + 1].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j - 1][i - 1].equals(jugador)) {//DIAGONAL2 \
                        if (tableroTicTacToe[j + 1][i + 1].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 6:
                    if (tableroTicTacToe[j - 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j - 2][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i + 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j][i - 1].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 7:
                    if (tableroTicTacToe[j + 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j + 2][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i - 1].equals(jugador)) {//VERTICAL
                        System.out.println("x");
                        if (tableroTicTacToe[j][i - 2].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j + 1][i - 1].equals(jugador)) {//DIAGONAL /
                        if (tableroTicTacToe[j + 2][i - 2].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 8:
                    if (tableroTicTacToe[j + 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j - 1][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i - 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j][i - 2].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
                case 9:
                    if (tableroTicTacToe[j - 1][i].equals(jugador)) {//HORIZONTAL
                        if (tableroTicTacToe[j - 2][i].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j][i - 1].equals(jugador)) {//VERTICAL
                        if (tableroTicTacToe[j][i - 2].equals(jugador)) {
                            return true;
                        }
                    } else if (tableroTicTacToe[j - 1][i - 1].equals(jugador)) {//DIAGONAL1 \
                        if (tableroTicTacToe[j - 2][i - 2].equals(jugador)) {
                            return true;
                        }
                    }
                    break;
            }
        }
        return false;
    }

    public void agregarMarca(int j, int i, int n) {
        String elemento = tableroTicTacToe[j][i];
        if (elemento.equals("X") || elemento.equals("O")) {
            System.out.println("Posicion ocupada");
        } else {
            contadorTF.setText(contador + "");
            if (contador == 9) {
                avisoJL.setText("Tablero lleno");
            }
            if (turno == 1) {
                switch (n) {
                    case 1:
                        b1.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 2:
                        b2.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 3:
                        b3.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 4:
                        b4.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 5:
                        b5.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 6:
                        b6.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 7:
                        b7.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 8:
                        b8.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                    case 9:
                        b9.setIcon(new ImageIcon("src/imagenes/x2.png"));
                        break;
                }
            }
            boolean ganador;
            if (turno == 1) {
                System.out.println("X Insertado: " + j + "," + i + "," + n);
                tableroTicTacToe[j][i] = "X";
                imprimirTablero(tableroTicTacToe);
                turno = 2;
                contador++;
                contadorTF.setText(contador + "");
                turnoJL.setText("Maquina");
                ganador = buscarGanador(n, turno, j, i, "X");
                if (ganador) {
                    JOptionPane.showMessageDialog(null, "Gana el jugador");
                    bloquearTablero();
                    turno = 0;
                    return;
                }
                //movimientoMaquina(tableroTicTacToe);
            }
            if (turno == 2) {
                bloquearTablero();
                int[] posicionO;
                posicionO = movimientoMaquina(tableroTicTacToe);
                int iAux = posicionO[1];
                int jAux = posicionO[0];
                int nAux = posicionO[2];
                System.out.println("O Insertado: " + jAux + "," + iAux + "," + nAux);
                tableroTicTacToe[jAux][iAux] = "O";
                imprimirTablero(tableroTicTacToe);
                turnoJL.setText("Jugador");
                ganador = buscarGanador(nAux, turno, jAux, iAux, "O");
                desbloquearTablero();
                if (ganador) {
                    JOptionPane.showMessageDialog(null, "Gana la maquina");
                    bloquearTablero();
                    turno = 0;
                }
                if (contador == 9 && !ganador) {
                    JOptionPane.showMessageDialog(null, "Empate");
                    bloquearTablero();
                }
                switch (nAux) {
                    case 1:
                        b1.setIcon(new ImageIcon("src/imagenes/o.png"));

                        break;
                    case 2:

                        b2.setIcon(new ImageIcon("src/imagenes/o.png"));

                        break;
                    case 3:

                        b3.setIcon(new ImageIcon("src/imagenes/o.png"));

                        break;
                    case 4:

                        b4.setIcon(new ImageIcon("src/imagenes/o.png"));

                        break;
                    case 5:

                        b5.setIcon(new ImageIcon("src/imagenes/o.png"));

                        break;
                    case 6:

                        b6.setIcon(new ImageIcon("src/imagenes/o.png"));

                        break;
                    case 7:
                        b7.setIcon(new ImageIcon("src/imagenes/o.png"));
                        break;
                    case 8:
                        b8.setIcon(new ImageIcon("src/imagenes/o.png"));
                        break;
                    case 9:
                        b9.setIcon(new ImageIcon("src/imagenes/o.png"));
                        break;
                }
                turno = 1;
                contador++;
                contadorTF.setText(contador + "");

            }

        }
    }

    public static int[] movimientoMaquina(String[][] tablero) {
        int profundidad = 0;
        ArrayList<String[][]> tableros = new ArrayList<String[][]>();
        String[][] tableroAuxiliar = copiarArray(tablero);

        int auxColumna, columnaMax = 0, columnaMin, columna = 0;//j
        int auxFila, filaMax = 0, filaMin = 0, fila = 0;//i
        int max;
        int min;
        int utilidad, utilidadMax = 1000;
        //int utilidadMax=-1000;
        if (!tableroLLeno(tableroAuxiliar)) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (tableroAuxiliar[j][i].equals("-")) {
                        tableroAuxiliar[j][i] = "O";
                        imprimirTablero(tableroAuxiliar);
                        System.out.println("J: " + j + ", I: " + i);
                        auxFila = j;//
                        auxColumna = i;//

                        max = numerFilasColumnasDiagonales(tableroAuxiliar, "X");
                        min = numerFilasColumnasDiagonales(tableroAuxiliar, "O");
                        utilidad = max - min;

                        System.out.println("U: " + max + "-" + min + "=" + utilidad);
                        if (utilidad < utilidadMax) {
                            System.out.println("MAX");
                            utilidadMax = utilidad;
                            filaMax = auxFila;//
                            columnaMax = auxColumna;//
                        }
                        System.out.println("____________________________________");
                        //min(tableroAuxiliar);
                        tableroAuxiliar = copiarArray(tablero);

                    }
                }
            }
            int n = 0;
            if (filaMax == 0 && columnaMax == 0) {
                n = 1;
            } else if (filaMax == 1 && columnaMax == 0) {
                n = 2;
            } else if (filaMax == 2 && columnaMax == 0) {
                n = 3;
            } else if (filaMax == 0 && columnaMax == 1) {
                n = 4;
            } else if (filaMax == 1 && columnaMax == 1) {
                n = 5;
            } else if (filaMax == 2 && columnaMax == 1) {
                n = 6;
            } else if (filaMax == 0 && columnaMax == 2) {
                n = 7;
            } else if (filaMax == 1 && columnaMax == 2) {
                n = 8;
            } else if (filaMax == 2 && columnaMax == 2) {
                n = 9;
            }
            int[] posicion = {filaMax, columnaMax, n};//j,i,n
            System.out.println("uMax: " + utilidadMax + ", J: " + filaMax + ", I: " + columnaMax + ", " + n);
            return posicion;
        } else {
            JOptionPane.showMessageDialog(null, "Tablero lleno");
            int[] posicion = {-1, -1};
            return posicion;
        }

    }

    public static int numerFilasColumnasDiagonales(String[][] tablero, String jugador) {
        int contadorFilasColumnasDiagonal = 0;
        String enemigo = "";

        if (jugador.equals("X")) {
            enemigo = "O";
        } else {
            enemigo = "X";
        }
        /*System.out.println(tablero[0][0] + " = " + jugador + " || = '-', 0,0");
        System.out.println(tablero[1][0] + " = " + jugador + " || = '-', 1,0");
        System.out.println(tablero[2][0] + " = " + jugador + " || = '-', 2,0");*/
        if (tablero[0][0].equals(jugador) || tablero[0][0].equals("-") && (!tablero[0][0].equals(enemigo))) {//Horizontal 0
            if (tablero[1][0].equals(jugador) || tablero[1][0].equals("-") && (!tablero[0][0].equals(enemigo))) {
                if (tablero[2][0].equals(jugador) || tablero[2][0].equals("-") && (!tablero[0][0].equals(enemigo))) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        /* System.out.println("H0: " + contadorFilasColumnasDiagonal);
        System.out.println(tablero[0][1] + " = " + jugador + " || = '-' 0,1");
        System.out.println(tablero[1][1] + " = " + jugador + " || = '-', 1,1");
        System.out.println(tablero[2][1] + " = " + jugador + " || = '-' 2,1");*/
        if (tablero[0][1].equals(jugador) || tablero[0][1].equals("-")) {///Horizontal 1
            if (tablero[1][1].equals(jugador) || tablero[1][1].equals("-")) {
                if (tablero[2][1].equals(jugador) || tablero[2][1].equals("-")) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        /*System.out.println("H1: " + contadorFilasColumnasDiagonal);
        System.out.println(tablero[0][2] + " = " + jugador + " || = '-' 0,2");
        System.out.println(tablero[1][2] + " = " + jugador + " || = '-' 1,2");
        System.out.println(tablero[2][2] + " = " + jugador + " || = '-' 2,2");*/
        if (tablero[0][2].equals(jugador) || tablero[0][2].equals("-")) {//Horizontal 2
            if (tablero[1][2].equals(jugador) || tablero[1][2].equals("-")) {
                if (tablero[2][2].equals(jugador) || tablero[2][2].equals("-")) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        /*System.out.println("H2: " + contadorFilasColumnasDiagonal);
        System.out.println(tablero[0][0] + " = " + jugador + " || = '-' 0,0");
        System.out.println(tablero[0][1] + " = " + jugador + " || = '-' 0,1");
        System.out.println(tablero[0][2] + " = " + jugador + " || = '-' 2,0");*/
        if (tablero[0][0].equals(jugador) || tablero[0][0].equals("-")) {//Vertical 0
            if (tablero[0][1].equals(jugador) || tablero[0][1].equals("-")) {
                if (tablero[0][2].equals(jugador) || tablero[0][2].equals("-")) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        /*System.out.println("V0: " + contadorFilasColumnasDiagonal);
        System.out.println(tablero[1][0] + " = " + jugador + " || = '-' 1,0");
        System.out.println(tablero[1][1] + " = " + jugador + " || = '-' 1,1");
        System.out.println(tablero[1][2] + " = " + jugador + " || = '-' 2,1");*/
        if (tablero[1][0].equals(jugador) || tablero[1][0].equals("-")) {//Vertical 1
            if (tablero[1][1].equals(jugador) || tablero[1][1].equals("-")) {
                if (tablero[1][2].equals(jugador) || tablero[1][2].equals("-")) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        /*System.out.println("V1: " + contadorFilasColumnasDiagonal);
        System.out.println(tablero[2][0] + " = " + jugador + " || = '-' 2,0");
        System.out.println(tablero[2][1] + " = " + jugador + " || = '-' 2,1");
        System.out.println(tablero[2][2] + " = " + jugador + " || = '-' 2,2");*/
        if (tablero[2][0].equals(jugador) || tablero[2][0].equals("-")) {//Vertical 2     
            if (tablero[2][1].equals(jugador) || tablero[2][1].equals("-")) {
                if (tablero[2][2].equals(jugador) || tablero[2][2].equals("-")) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        /*System.out.println("V2: " + contadorFilasColumnasDiagonal);
        System.out.println(tablero[0][0] + " = " + jugador + " || = '-' 0,0");
        System.out.println(tablero[1][1] + " = " + jugador + " || = '-' 1,1");
        System.out.println(tablero[2][2] + " = " + jugador + " || = '-' 2,2");*/
        if (tablero[0][0].equals(jugador) || tablero[0][0].equals("-")) {//Diagonal \
            if (tablero[1][1].equals(jugador) || tablero[1][1].equals("-")) {
                if (tablero[2][2].equals(jugador) || tablero[2][2].equals("-")) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        /*System.out.println("D\\: " + contadorFilasColumnasDiagonal);
        System.out.println(tablero[1][1] + " = " + jugador + " || = '-'");
        System.out.println(tablero[0][2] + " = " + jugador + " || = '-'");
        System.out.println(tablero[2][0] + " = " + jugador + " || = '-'");*/
        if (tablero[0][2].equals(jugador) || tablero[0][2].equals("-")) {//Diagonal /
            if (tablero[1][1].equals(jugador) || tablero[1][1].equals("-")) {
                if (tablero[2][0].equals(jugador) || tablero[2][0].equals("-")) {
                    contadorFilasColumnasDiagonal++;
                }
            }
        }
        //System.out.println("D/: " + contadorFilasColumnasDiagonal);
        //System.out.println("FCD de "+jugador+": "+contadorFilasColumnasDiagonal);
        return contadorFilasColumnasDiagonal;
    }

    public static void min(String[][] tablero) {

    }

    public static void max(int nivel) {

    }

    public void bloquearTablero() {
        b1.setEnabled(false);
        b2.setEnabled(false);
        b3.setEnabled(false);
        b4.setEnabled(false);
        b5.setEnabled(false);
        b6.setEnabled(false);
        b7.setEnabled(false);
        b8.setEnabled(false);
        b9.setEnabled(false);
    }

    public void desbloquearTablero() {
        b1.setEnabled(true);
        b2.setEnabled(true);
        b3.setEnabled(true);
        b4.setEnabled(true);
        b5.setEnabled(true);
        b6.setEnabled(true);
        b7.setEnabled(true);
        b8.setEnabled(true);
        b9.setEnabled(true);
    }

    public void limpiarTablero() {
        b1.setIcon(null);
        b2.setIcon(null);
        b3.setIcon(null);
        b4.setIcon(null);
        b5.setIcon(null);
        b6.setIcon(null);
        b7.setIcon(null);
        b8.setIcon(null);
        b9.setIcon(null);
        contador = 0;
        avisoJL.setText("");
        contadorTF.setText(contador + "");
        turno = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                tableroTicTacToe[i][j] = "-";
            }
        }
        System.out.println("Tablero reiniciado...");
    }

    public static void imprimirTablero(String[][] tablero) {
        String tableroAux = "";
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                tableroAux += tablero[j][i];
            }
            tableroAux += "\n";
        }
        System.out.println(tableroAux);
    }

    public static boolean tableroVacio() {
        int aux = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tableroTicTacToe[i][j].equals("-")) {
                    aux++;
                }
            }
        }
        if (aux == 9) {
            System.out.println("Tablero vacio");
            return true;
        }
        System.out.println("Un elemento o mas en el tablero");
        return false;
    }

    public static boolean tableroLLeno(String[][] tablero) {
        int contador = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tablero[j][i].equals("X") || tablero[j][i].equals("O")) {
                    contador++;
                } else {
                    return false;
                }
            }
        }
        if (contador == 9) {
            return true;
        }
        return false;
    }

    public static String[][] copiarArray(String[][] arrayOrigen) {
        String[][] arrayDestino = new String[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                arrayDestino[j][i] = arrayOrigen[j][i];
            }
        }
        return arrayDestino;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }

        });
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                tableroTicTacToe[i][j] = "-";
            }
        }
        /*int[][] numeros={{1,2,3},{4,5,6},{7,8,9}};
        System.out.println("_________________I-J");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(numeros[i][j]+"("+i+","+j+")");
            }
            System.out.println("");
        }
        System.out.println("_________________J-I");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(numeros[j][i]+"("+j+","+i+")");
            }
            System.out.println("");
        }*/

    }


    // Variables declaration - do not modify                     
    private javax.swing.JLabel avisoJL;
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JButton b6;
    private javax.swing.JButton b7;
    private javax.swing.JButton b8;
    private javax.swing.JButton b9;
    private javax.swing.JTextField contadorTF;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jugadorRB;
    private javax.swing.JRadioButton maquinaRB;
    private javax.swing.ButtonGroup opcionesGroup;
    private javax.swing.JLabel turnoJL;
    // End of variables declaration                   
}
